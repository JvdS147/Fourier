/* *********************************************
Copyright (c) 2013-2022, Cornelis Jan (Jacco) van de Streek
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of my employers nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL CORNELIS JAN VAN DE STREEK BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
********************************************* */

#include "ReadCell.h"
#include "3DCalculations.h"
#include "CrystalStructure.h"
#include "TextFileReader_2.h"
#include "Utilities.h"

#include <stdexcept>

#include <iostream> // For debugging



//#*************************************************************************************
//#*                    Generated by cif2cell 1.2.7 2015-09-24 16:33                   *
//#*   T. Bjorkman, Comp. Phys. Commun. 182, 1183-1186 (2011). Please cite generously. *
//#*                                                                                   *
//#*                 Data obtained from CSD. Reference number : ADERIL                 *
//#*                      C8 H10 N2 O1   (
//
//#4-Methylbenzamidoxime)                     *
//#* Hai-Bo Wang et al., Acta Crystallogr.,Sect.E:Struct.Rep.Online  62, o3105- (2006) *
//#*************************************************************************************
//
//%BLOCK LATTICE_CART
//ang    # angstrom units
//   6.422000000000000   0.000000000000000   0.000000000000000
//   0.592746588633002   7.448451884899569   0.000000000000000
//   2.343612305591979   2.960298154818566  16.760992727033077
//%ENDBLOCK LATTICE_CART
//
//%BLOCK POSITIONS_FRAC
//C    0.289197600000000   0.925595000000000   0.072592400000000 
//C    0.272896400000000   0.279940600000000   0.296442800000000 
//%ENDBLOCK POSITIONS_FRAC
//
//%BLOCK SYMMETRY_OPS
//# Symm. op. 1
//  1.000000000000000   0.000000000000000   0.000000000000000 
// -0.000000000000000   1.000000000000000   0.000000000000000 
//  0.000000000000000   0.000000000000000   1.000000000000000 
//  0.000000000000000   0.000000000000000   0.000000000000000 
//# Symm. op. 2
// -1.000000000000000   0.000000000000000   0.000000000000000 
//  0.000000000000000  -1.000000000000000   0.000000000000000 
//  0.000000000000000   0.000000000000000  -1.000000000000000 
//  0.000000000000000   0.000000000000000   0.000000000000000 
//%ENDBLOCK SYMMETRY_OPS
//
//KPOINTS_MP_SPACING : 0.05
//KPOINTS_MP_OFFSET : 0.25 0.25 0.25
//FIX_ALL_CELL : false
//FIX_COM : true
//FIX_ALL_IONS : false
//
//%BLOCK IONIC_CONSTRAINTS
//%ENDBLOCK IONIC_CONSTRAINTS

// ********************************************************************************

void read_cell( const FileName & file_name, CrystalStructure & crystal_structure )
{
    TextFileReader_2 text_file_reader( file_name );
    read_cell( text_file_reader, crystal_structure );
}

// ********************************************************************************

void read_cell( TextFileReader_2 & text_file_reader, CrystalStructure & crystal_structure )
{
    text_file_reader.purge_comment_lines( "#" );
    text_file_reader.purge_comment_lines( ";" );
    text_file_reader.purge_comment_lines( "!" );
    text_file_reader.purge_comment_lines( "COMMENT", false );
    text_file_reader.purge_empty_lines();
    size_t iPos;
    std::string line;
    std::vector< std::string > words;
    Matrix3D matrix;
    crystal_structure = CrystalStructure();
//%BLOCK LATTICE_CART
//ang    # angstrom units
//   6.422000000000000   0.000000000000000   0.000000000000000
//   0.592746588633002   7.448451884899569   0.000000000000000
//   2.343612305591979   2.960298154818566  16.760992727033077
//%ENDBLOCK LATTICE_CART
    iPos = text_file_reader.find( "%BLOCK LATTICE_CART" );
    if ( iPos == std::string::npos )
        throw std::runtime_error( "read_cell(): cell parameters not found." );
    ++iPos;
    line = text_file_reader.line( iPos );
    if ( to_upper( line.substr( 0, 3 ) ) == "ANG" )
    {
        ++iPos;
        line = text_file_reader.line( iPos );
    }
    words = split( line );
    if ( words.size() != 3 )
        throw std::runtime_error( "read_cell(): cell parameters not found 1." );
    matrix.set_value( 0, 0, string2double( words[0] ) );
    matrix.set_value( 0, 1, string2double( words[1] ) );
    matrix.set_value( 0, 2, string2double( words[2] ) );
    ++iPos;
    line = text_file_reader.line( iPos );
    words = split( line );
    if ( words.size() != 3 )
        throw std::runtime_error( "read_cell(): cell parameters not found 2." );
    matrix.set_value( 1, 0, string2double( words[0] ) );
    matrix.set_value( 1, 1, string2double( words[1] ) );
    matrix.set_value( 1, 2, string2double( words[2] ) );
    ++iPos;
    line = text_file_reader.line( iPos );
    words = split( line );
    if ( words.size() != 3 )
        throw std::runtime_error( "read_cell(): cell parameters not found 3." );
    matrix.set_value( 2, 0, string2double( words[0] ) );
    matrix.set_value( 2, 1, string2double( words[1] ) );
    matrix.set_value( 2, 2, string2double( words[2] ) );
    ++iPos;
    line = text_file_reader.line( iPos );
    if ( to_upper( line ) != "%ENDBLOCK LATTICE_CART" )
        throw std::runtime_error( "read_cell(): cell parameters not found 4." );
    CrystalLattice crystal_lattice;
    crystal_lattice.from_CASTEP( matrix );
    crystal_structure.set_crystal_lattice( crystal_lattice );
//%BLOCK POSITIONS_FRAC
//C    0.289197600000000   0.925595000000000   0.072592400000000 
//C    0.272896400000000   0.279940600000000   0.296442800000000 
//%ENDBLOCK POSITIONS_FRAC
    iPos = text_file_reader.find( "%BLOCK POSITIONS_FRAC" );
    if ( iPos == std::string::npos )
        throw std::runtime_error( "read_cell(): atoms not found." );
    ++iPos;
    line = text_file_reader.line( iPos );
    size_t iAtom( 0 );
    while ( line != "%ENDBLOCK POSITIONS_FRAC" )
    {
        ++iAtom;
        words = split( line );
        crystal_structure.add_atom( Atom( Element( words[0] ), Vector3D( string2double( words[1] ), string2double( words[2] ), string2double( words[3] ) ), words[0]+size_t2string( iAtom ) ) );
        ++iPos;
        line = text_file_reader.line( iPos );
    }
//%BLOCK SYMMETRY_OPS
//  1.000000000000000   0.000000000000000   0.000000000000000 
// -0.000000000000000   1.000000000000000   0.000000000000000 
//  0.000000000000000   0.000000000000000   1.000000000000000 
//  0.000000000000000   0.000000000000000   0.000000000000000 
// -1.000000000000000   0.000000000000000   0.000000000000000 
//  0.000000000000000  -1.000000000000000   0.000000000000000 
//  0.000000000000000   0.000000000000000  -1.000000000000000 
//  0.000000000000000   0.000000000000000   0.000000000000000 
//%ENDBLOCK SYMMETRY_OPS


//This is from Cif2Cell
//        # Space group operations to cartesian representation
//        lv = self.conventional_latticevectors()
// The function self.conventional_latticevectors() is weird function. For for example orthogonal unit cells, it creates a martix that looks like this:
//
//  | 1.0  0.0  0.0 |
//  | 0.0  b/a  0.0 |
//  | 0.0  0.0  c/a |
//
//        for op in self.symops:
//            op.rotation = lv.transform(op.rotation)
//            op.rotation = op.rotation.transform(minv3(lv))
//            # transform translations
//            op.translation = op.translation.transform(minv3(self.lattrans))
// // minv3v = matrix inversion 3x3 matrix
//        # Test that the lattice vectors are invariant under all space group operations
//        # If not, the data is given in some non-standard representation that presently
//        # can't be handled.
//        if self.crystal_system() == 'hexagonal' or self.crystal_system() == 'trigonal':
//            # Hexagonal and trigonal as a special case... check that the hexagonal planes are in the ab plane
//            for op in self.symops:
//                if not (op.rotation[2] == Vector([0,0,1]) or op.rotation[2] == Vector([0,0,-1])):
//                    raise SymmetryError("Lattice vectors do not fulfil the given symmetries of the lattice!\n"+
//                                        "The cell is given in some non-standard setting presently not handled by the program.")
//        else:
//            for op in self.symops:
//                if not op.translation.length() > self.compeps:
//                    fails = False
//                    for vec1 in lv:
//                        transvec = vec1.transform(op.rotation)
//                        if not (transvec == lv[0] or transvec == lv[1] or transvec == lv[2]
//                                or transvec == -lv[0] or transvec == -lv[1] or transvec == -lv[2]):
//                            fails = True
//                    if fails:
//                        raise SymmetryError("Lattice vectors do not fulfil the given symmetries of the lattice!\n"\
//                                            "The cell is given in some non-standard setting presently not handled by the program.")

    iPos = text_file_reader.find( "%BLOCK SYMMETRY_OPS" );
    if ( iPos == std::string::npos )
        throw std::runtime_error( "read_cell(): symmetry operators not found." );
    ++iPos;
    line = text_file_reader.line( iPos );
    std::vector< SymmetryOperator > symmetry_operators;
    while ( line != "%ENDBLOCK SYMMETRY_OPS" )
    {
        words = split( line );
        if ( words.size() != 3 )
            throw std::runtime_error( "read_cell(): symmetry operators not found 1." );
        matrix.set_value( 0, 0, string2double( words[0] ) );
        matrix.set_value( 1, 0, string2double( words[1] ) );
        matrix.set_value( 2, 0, string2double( words[2] ) );
        ++iPos;
        line = text_file_reader.line( iPos );
        words = split( line );
        if ( words.size() != 3 )
            throw std::runtime_error( "read_cell(): symmetry operators not found 2." );
        matrix.set_value( 0, 1, string2double( words[0] ) );
        matrix.set_value( 1, 1, string2double( words[1] ) );
        matrix.set_value( 2, 1, string2double( words[2] ) );
        ++iPos;
        line = text_file_reader.line( iPos );
        words = split( line );
        if ( words.size() != 3 )
            throw std::runtime_error( "read_cell(): symmetry operators not found 3." );
        matrix.set_value( 0, 2, string2double( words[0] ) );
        matrix.set_value( 1, 2, string2double( words[1] ) );
        matrix.set_value( 2, 2, string2double( words[2] ) );
        ++iPos;
        line = text_file_reader.line( iPos );
        words = split( line );
        if ( words.size() != 3 )
            throw std::runtime_error( "read_cell(): symmetry operators not found 4." );
        Vector3D translation( string2double( words[0] ), string2double( words[1] ), string2double( words[2] ) );
        symmetry_operators.push_back( SymmetryOperator( matrix, translation ) );
        ++iPos;
        line = text_file_reader.line( iPos );
    }
    SpaceGroup space_group( symmetry_operators );
    crystal_structure.set_space_group( space_group );
    crystal_structure.reduce_to_asymmetric_unit();
}

// ********************************************************************************

